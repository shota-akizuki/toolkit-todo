[{"/Users/akizukishota/Developer/toolkit-todo/src/index.tsx":"1","/Users/akizukishota/Developer/toolkit-todo/src/App.tsx":"2","/Users/akizukishota/Developer/toolkit-todo/src/app/store.ts":"3","/Users/akizukishota/Developer/toolkit-todo/src/features/counter/counterSlice.ts":"4","/Users/akizukishota/Developer/toolkit-todo/src/components/header/Header.tsx":"5","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskItem/TaskItem.tsx":"6","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskSlice.ts":"7","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskForm/TaskForm.tsx":"8","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskList/TaskList.tsx":"9"},{"size":648,"mtime":1609238906316,"results":"10","hashOfConfig":"11"},{"size":539,"mtime":1609238906311,"results":"12","hashOfConfig":"11"},{"size":519,"mtime":1609254824135,"results":"13","hashOfConfig":"11"},{"size":1851,"mtime":1609238906313,"results":"14","hashOfConfig":"11"},{"size":600,"mtime":1609238906312,"results":"15","hashOfConfig":"11"},{"size":1593,"mtime":1609238906314,"results":"16","hashOfConfig":"11"},{"size":1891,"mtime":1609254870820,"results":"17","hashOfConfig":"11"},{"size":1364,"mtime":1609257904670,"results":"18","hashOfConfig":"11"},{"size":601,"mtime":1609257182182,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1d5pmfy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akizukishota/Developer/toolkit-todo/src/index.tsx",[],[],"/Users/akizukishota/Developer/toolkit-todo/src/App.tsx",["43"],"import React from \"react\";\r\nimport Header from \"./components/header/Header\";\r\nimport styles from \"./App.module.scss\";\r\nimport TaskForm from \"./features/task/taskForm/TaskForm\";\r\nimport TaskItem from \"./features/task/taskItem/TaskItem\";\r\nimport TaskList from \"./features/task/taskList/TaskList\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.wrapper}>\r\n        <Header />\r\n        <TaskForm />\r\n        <TaskList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",[],"/Users/akizukishota/Developer/toolkit-todo/src/app/store.ts",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/counter/counterSlice.ts",["44"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","/Users/akizukishota/Developer/toolkit-todo/src/components/header/Header.tsx",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskItem/TaskItem.tsx",["45","46","47","48","49","50"],"import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EventNoteIcon from \"@material-ui/icons/EventNote\";\nimport styles from \"./TaskItem.module.scss\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\ninterface PropTypes {\n  task: { id: number; title: string; completed: boolean };\n}\n\nconst TaskItem: React.FC<PropTypes> = ({ task }) => {\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>\n        <EventNoteIcon />\n        <div className={styles.title_text}>{task.title}</div>\n      </div>\n      <div className={styles.right_items}>\n        <Checkbox\n          checked={task.completed}\n          onClick={() => console.log(\"check${task.id}\")}\n          className={styles.checkbox}\n        />\n        <button\n          onClick={() => console.log(\"edit${task.id}\")}\n          className={styles.edit_button}\n        >\n          <EditIcon className={styles.icon} />\n        </button>\n        <button\n          onClick={() => console.log(\"delete${task.id}\")}\n          className={styles.delete_button}\n        >\n          <DeleteIcon className={styles.icon} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TaskItem;\n","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskSlice.ts",["51","52","53","54"],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskForm/TaskForm.tsx",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskList/TaskList.tsx",[],{"ruleId":"55","severity":1,"message":"56","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":48,"column":28,"nodeType":"61","messageId":"62","endLine":48,"endColumn":49},{"ruleId":"55","severity":1,"message":"63","line":2,"column":8,"nodeType":"57","messageId":"58","endLine":2,"endColumn":12},{"ruleId":"55","severity":1,"message":"64","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":16},{"ruleId":"55","severity":1,"message":"65","line":4,"column":8,"nodeType":"57","messageId":"58","endLine":4,"endColumn":20},{"ruleId":"55","severity":1,"message":"66","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":31},{"ruleId":"55","severity":1,"message":"67","line":6,"column":8,"nodeType":"57","messageId":"58","endLine":6,"endColumn":20},{"ruleId":"55","severity":1,"message":"68","line":8,"column":8,"nodeType":"57","messageId":"58","endLine":8,"endColumn":18},{"ruleId":"55","severity":1,"message":"69","line":1,"column":23,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"70","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":15},{"ruleId":"55","severity":1,"message":"71","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":21},{"ruleId":"55","severity":1,"message":"72","line":4,"column":10,"nodeType":"57","messageId":"58","endLine":4,"endColumn":18},"@typescript-eslint/no-unused-vars","'TaskItem' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'ListItemText' is defined but never used.","'IconButton' is defined but never used.","'PayloadAction' is defined but never used.","'title' is defined but never used.","'useSelector' is defined but never used.","'AppThunk' is defined but never used."]