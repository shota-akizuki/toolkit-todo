[{"/Users/akizukishota/toolkit-todo/src/index.tsx":"1","/Users/akizukishota/toolkit-todo/src/App.tsx":"2","/Users/akizukishota/toolkit-todo/src/features/task/taskForm/TaskForm.tsx":"3","/Users/akizukishota/toolkit-todo/src/features/task/taskItem/TaskItem.tsx":"4","/Users/akizukishota/toolkit-todo/src/app/store.ts":"5","/Users/akizukishota/toolkit-todo/src/features/task/taskSlice.ts":"6","/Users/akizukishota/toolkit-todo/src/features/counter/counterSlice.ts":"7","/Users/akizukishota/toolkit-todo/src/components/header/Header.tsx":"8","/Users/akizukishota/toolkit-todo/src/features/task/taskList/TaskList.tsx":"9"},{"size":648,"mtime":1611725063652,"results":"10","hashOfConfig":"11"},{"size":539,"mtime":1611725063648,"results":"12","hashOfConfig":"11"},{"size":2436,"mtime":1611731373496,"results":"13","hashOfConfig":"11"},{"size":2163,"mtime":1611983646411,"results":"14","hashOfConfig":"11"},{"size":519,"mtime":1611725063649,"results":"15","hashOfConfig":"11"},{"size":3021,"mtime":1611983576996,"results":"16","hashOfConfig":"11"},{"size":1851,"mtime":1611725063650,"results":"17","hashOfConfig":"11"},{"size":600,"mtime":1611725063649,"results":"18","hashOfConfig":"11"},{"size":603,"mtime":1611727823529,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"lw8gxo",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akizukishota/toolkit-todo/src/index.tsx",[],[],"/Users/akizukishota/toolkit-todo/src/App.tsx",["42"],"import React from \"react\";\r\nimport Header from \"./components/header/Header\";\r\nimport styles from \"./App.module.scss\";\r\nimport TaskForm from \"./features/task/taskForm/TaskForm\";\r\nimport TaskItem from \"./features/task/taskItem/TaskItem\";\r\nimport TaskList from \"./features/task/taskList/TaskList\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.wrapper}>\r\n        <Header />\r\n        <TaskForm />\r\n        <TaskList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/Users/akizukishota/toolkit-todo/src/features/task/taskForm/TaskForm.tsx",[],"/Users/akizukishota/toolkit-todo/src/features/task/taskItem/TaskItem.tsx",[],"/Users/akizukishota/toolkit-todo/src/app/store.ts",[],"/Users/akizukishota/toolkit-todo/src/features/task/taskSlice.ts",["43","44","45","46"],"/Users/akizukishota/toolkit-todo/src/features/counter/counterSlice.ts",["47"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","/Users/akizukishota/toolkit-todo/src/components/header/Header.tsx",[],[],"/Users/akizukishota/toolkit-todo/src/features/task/taskList/TaskList.tsx",[],{"ruleId":"48","severity":1,"message":"49","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":16},{"ruleId":"48","severity":1,"message":"52","line":1,"column":10,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"48","severity":1,"message":"53","line":1,"column":41,"nodeType":"50","messageId":"51","endLine":1,"endColumn":54},{"ruleId":"48","severity":1,"message":"54","line":2,"column":10,"nodeType":"50","messageId":"51","endLine":2,"endColumn":41},{"ruleId":"48","severity":1,"message":"55","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":18},{"ruleId":"56","severity":1,"message":"57","line":48,"column":28,"nodeType":"58","messageId":"59","endLine":48,"endColumn":49},"@typescript-eslint/no-unused-vars","'TaskItem' is defined but never used.","Identifier","unusedVar","'createAsyncThunk' is defined but never used.","'PayloadAction' is defined but never used.","'skipPartiallyEmittedExpressions' is defined but never used.","'AppThunk' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]