[{"/Users/akizukishota/toolkit-todo/src/index.tsx":"1","/Users/akizukishota/toolkit-todo/src/App.tsx":"2","/Users/akizukishota/toolkit-todo/src/features/task/taskForm/TaskForm.tsx":"3","/Users/akizukishota/toolkit-todo/src/features/task/taskItem/TaskItem.tsx":"4","/Users/akizukishota/toolkit-todo/src/app/store.ts":"5","/Users/akizukishota/toolkit-todo/src/features/task/taskSlice.ts":"6","/Users/akizukishota/toolkit-todo/src/features/counter/counterSlice.ts":"7","/Users/akizukishota/toolkit-todo/src/components/header/Header.tsx":"8"},{"size":648,"mtime":1611725063652,"results":"9","hashOfConfig":"10"},{"size":539,"mtime":1611725063648,"results":"11","hashOfConfig":"10"},{"size":2123,"mtime":1611726436712,"results":"12","hashOfConfig":"10"},{"size":2142,"mtime":1611727209296,"results":"13","hashOfConfig":"10"},{"size":519,"mtime":1611725063649,"results":"14","hashOfConfig":"10"},{"size":2268,"mtime":1611727747709,"results":"15","hashOfConfig":"10"},{"size":1851,"mtime":1611725063650,"results":"16","hashOfConfig":"10"},{"size":600,"mtime":1611725063649,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"lw8gxo",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akizukishota/toolkit-todo/src/index.tsx",[],[],"/Users/akizukishota/toolkit-todo/src/App.tsx",["37"],"import React from \"react\";\r\nimport Header from \"./components/header/Header\";\r\nimport styles from \"./App.module.scss\";\r\nimport TaskForm from \"./features/task/taskForm/TaskForm\";\r\nimport TaskItem from \"./features/task/taskItem/TaskItem\";\r\nimport TaskList from \"./features/task/taskList/TaskList\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.wrapper}>\r\n        <Header />\r\n        <TaskForm />\r\n        <TaskList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/Users/akizukishota/toolkit-todo/src/features/task/taskForm/TaskForm.tsx",[],"/Users/akizukishota/toolkit-todo/src/features/task/taskItem/TaskItem.tsx",[],"/Users/akizukishota/toolkit-todo/src/app/store.ts",[],"/Users/akizukishota/toolkit-todo/src/features/task/taskSlice.ts",["38","39"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"../../app/store\";\n\n//ここ変数の定義ではなく型の指定\ninterface TaskState {\n  //taskが何個あるの管理する\n  idCount: number;\n  //storeに保存するtaskの一覧。連想配列をオブジェクト型で定義？\n  tasks: { id: number; title: string; completed: boolean }[];\n  //taskを編集する際にどのtaskが選択されているのかを示すもの\n  selectedTask: { id: number; title: string; completed: boolean };\n  //Modalを開くかどうかを管理する\n  isModalOpen: boolean;\n}\n\n//以下にstateの初期値を書く\nconst initialState: TaskState = {\n  idCount: 1,\n  tasks: [{ id: 1, title: \"Task A\", completed: false }],\n  selectedTask: { id: 0, title: \"\", completed: false },\n  isModalOpen: false,\n};\n\nexport const taskSlice = createSlice({\n  name: \"task\",\n  //先程定義したinitialStateの値を代入\n  initialState,\n  //どのようにstateを変更するのかロジック部分\n  reducers: {\n    //タスクを作成する\n    createTask: (state, action) => {\n      state.idCount++;\n      const newTask = {\n        id: state.idCount,\n        title: action.payload,\n        completed: false,\n      };\n      //...スプレッド構文\n      state.tasks = [newTask, ...state.tasks];\n    },\n    //どのtaskを選択しているかん管理\n    selectTask: (state, action) => {\n      state.selectedTask = action.payload;\n    },\n    //Modalを開くか閉じるかのフラグ管理\n    handleModalOpen: (state, action) => {\n      state.isModalOpen = action.payload;\n    },\n  },\n});\n\n//本来はactionsは別で定義するが、toolkitのおかげでここに書ける\n//task/createTaskという型が生成される\nexport const { createTask, selectTask, handleModalOpen } = taskSlice.actions;\n\n//useSelector(selectTask)でReactのコンポーネントに値を渡せる\nexport const selectTasks = (state: RootState): TaskState[\"tasks\"] =>\n  state.task.tasks;\n\nexport const selectIsModalOpen = (state: RootState): TaskState[\"isModalOpen\"] =>\n  state.task.isModalOpen;\n\nexport const selectSelectedTask = (\n  state: RootState\n): TaskState[\"selectedTask\"] => state.task.selectedTask;\n\nexport default taskSlice.reducer;\n","/Users/akizukishota/toolkit-todo/src/features/counter/counterSlice.ts",["40"],"/Users/akizukishota/toolkit-todo/src/components/header/Header.tsx",[],{"ruleId":"41","severity":1,"message":"42","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":16},{"ruleId":"41","severity":1,"message":"45","line":1,"column":23,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"41","severity":1,"message":"46","line":2,"column":10,"nodeType":"43","messageId":"44","endLine":2,"endColumn":18},{"ruleId":"47","severity":1,"message":"48","line":48,"column":28,"nodeType":"49","messageId":"50","endLine":48,"endColumn":49},"@typescript-eslint/no-unused-vars","'TaskItem' is defined but never used.","Identifier","unusedVar","'PayloadAction' is defined but never used.","'AppThunk' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType"]