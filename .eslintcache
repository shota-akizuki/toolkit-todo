[{"/Users/akizukishota/Developer/toolkit-todo/src/index.tsx":"1","/Users/akizukishota/Developer/toolkit-todo/src/App.tsx":"2","/Users/akizukishota/Developer/toolkit-todo/src/app/store.ts":"3","/Users/akizukishota/Developer/toolkit-todo/src/features/counter/counterSlice.ts":"4","/Users/akizukishota/Developer/toolkit-todo/src/components/header/Header.tsx":"5","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskItem/TaskItem.tsx":"6","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskSlice.ts":"7","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskForm/TaskForm.tsx":"8","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskList/TaskList.tsx":"9"},{"size":648,"mtime":1610820228996,"results":"10","hashOfConfig":"11"},{"size":539,"mtime":1610820228993,"results":"12","hashOfConfig":"11"},{"size":519,"mtime":1609254824135,"results":"13","hashOfConfig":"11"},{"size":1851,"mtime":1610820228994,"results":"14","hashOfConfig":"11"},{"size":600,"mtime":1610820228993,"results":"15","hashOfConfig":"11"},{"size":2130,"mtime":1610824930304,"results":"16","hashOfConfig":"11"},{"size":1891,"mtime":1610820228995,"results":"17","hashOfConfig":"11"},{"size":2108,"mtime":1610826128859,"results":"18","hashOfConfig":"11"},{"size":601,"mtime":1610820228995,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1d5pmfy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/akizukishota/Developer/toolkit-todo/src/index.tsx",[],[],"/Users/akizukishota/Developer/toolkit-todo/src/App.tsx",["42"],"import React from \"react\";\r\nimport Header from \"./components/header/Header\";\r\nimport styles from \"./App.module.scss\";\r\nimport TaskForm from \"./features/task/taskForm/TaskForm\";\r\nimport TaskItem from \"./features/task/taskItem/TaskItem\";\r\nimport TaskList from \"./features/task/taskList/TaskList\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.wrapper}>\r\n        <Header />\r\n        <TaskForm />\r\n        <TaskList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/Users/akizukishota/Developer/toolkit-todo/src/app/store.ts",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/counter/counterSlice.ts",["43"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","/Users/akizukishota/Developer/toolkit-todo/src/components/header/Header.tsx",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskItem/TaskItem.tsx",["44","45","46","47","48","49"],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskSlice.ts",["50","51","52","53"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { title } from \"process\";\nimport { useSelector } from \"react-redux\";\nimport { AppThunk, RootState } from \"../../app/store\";\n\n//ここ変数の定義ではなく型の指定\ninterface TaskState {\n  //taskが何個あるの管理する\n  idCount: number;\n  //storeに保存するtaskの一覧。連想配列をオブジェクト型で定義？\n  tasks: { id: number; title: string; completed: boolean }[];\n  //taskを編集する際にどのtaskが選択されているのかを示すもの\n  selectedTask: { id: number; title: string; completed: boolean };\n  //Modalを開くかどうかを管理する\n  isModalOpen: boolean;\n}\n\n//以下にstateの初期値を書く\nconst initialState: TaskState = {\n  idCount: 1,\n  tasks: [{ id: 1, title: \"Task A\", completed: false }],\n  selectedTask: { id: 0, title: \"\", completed: false },\n  isModalOpen: false,\n};\n\nexport const taskSlice = createSlice({\n  name: \"task\",\n  //先程定義したinitialStateの値を代入\n  initialState,\n  //どのようにstateを変更するのかロジック部分\n  reducers: {\n    //タスクを作成する\n    createTask: (state, action) => {\n      state.idCount++;\n      const newTask = {\n        id: state.idCount,\n        title: action.payload,\n        completed: false,\n      };\n      //...スプレッド構文→ググる\n      state.tasks = [newTask, ...state.tasks];\n    },\n  },\n});\n\n//本来はactionsは別で定義するが、toolkitのおかげでここに書ける\n//task/createTaskという型が生成される\nexport const { createTask } = taskSlice.actions;\n\n//useSelector(selectTask)でReactのコンポーネントに値を渡せる\nexport const selectTask = (state: RootState): TaskState[\"tasks\"] =>\n  state.task.tasks;\n\nexport default taskSlice.reducer;\n\n//これはcounterフォルダにあるcounteSlice.tsxのこぴぺ\n","/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskForm/TaskForm.tsx",[],"/Users/akizukishota/Developer/toolkit-todo/src/features/task/taskList/TaskList.tsx",[],{"ruleId":"54","severity":1,"message":"55","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":48,"column":28,"nodeType":"60","messageId":"61","endLine":48,"endColumn":49},{"ruleId":"54","severity":1,"message":"62","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"63","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":16},{"ruleId":"54","severity":1,"message":"64","line":4,"column":8,"nodeType":"56","messageId":"57","endLine":4,"endColumn":20},{"ruleId":"54","severity":1,"message":"65","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":31},{"ruleId":"54","severity":1,"message":"66","line":6,"column":8,"nodeType":"56","messageId":"57","endLine":6,"endColumn":20},{"ruleId":"54","severity":1,"message":"67","line":8,"column":8,"nodeType":"56","messageId":"57","endLine":8,"endColumn":18},{"ruleId":"54","severity":1,"message":"68","line":1,"column":23,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"69","line":2,"column":10,"nodeType":"56","messageId":"57","endLine":2,"endColumn":15},{"ruleId":"54","severity":1,"message":"70","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":21},{"ruleId":"54","severity":1,"message":"71","line":4,"column":10,"nodeType":"56","messageId":"57","endLine":4,"endColumn":18},"@typescript-eslint/no-unused-vars","'TaskItem' is defined but never used.","Identifier","unusedVar","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'ListItemText' is defined but never used.","'IconButton' is defined but never used.","'PayloadAction' is defined but never used.","'title' is defined but never used.","'useSelector' is defined but never used.","'AppThunk' is defined but never used."]